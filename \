






int iso = 2; // # of isotope = 2;

double MYExp(double *x, double *par){
  // par[0]: constant scaling factor
  // par[1]: tau (halflife)
  // dim[0]: x value - time 

  double lam1 = 0.693/par[1];
  return par[0]*TMath::Exp(-lam1*x[0]);

}

double Bateman(double *x, double *par, int n=1){
  double mul = 1;
  double sum = 0;
  for(int i=1;i<=n;i++){
    double lami = 0.693/par[i];
    if(i<=(n-1)) mul = mul*lami;
    double denominator = 1;
    for(int j=1;j<=n;j++){
      if(j==i) continue;
      double lamj = 0.693/par[j];
      denominator = denominator * (lamj - lami);
    }
    sum += TMath::Exp(-lami*x[0])/denominator; 
  }
  return par[0]*mul*sum;
}

double sum_Bateman(double *x, double *par){
  double sum = 0;
  for(int i=1;i<=iso;i++){
    sum += Bateman(x,par,i);
  }
  return sum;
}

double tryFit(double *x, double *par){
  double lam1 = 0.693/par[1];
  double lam2 = 0.693/par[2];
  double iso1 = par[0]*TMath::Exp(-lam1);
  double iso2 = par[0]*lam1/(lam1-lam2)*TMath::Exp(-lam2*x[0]);
  return iso1 + iso2;
}

double MYFit(double *x, double *par) {


  double bg1 = par[0];  // constant bg

  return bg + tryFit(x,par+1) + MYExp(x,4);
}



void searchinitPar(){



  TFile *file = TFile::Open("/home/zhu/packages/BCSSort/master_beta_prompt_op.root");
  TH1D *th1 = (TH1D *)file->Get("decaytime_32Na");
  double *p = new double;
  p[0] = 10000; // constant bg
  p[1] = 1000;  // 32Na scaling factor = 32Mg scaling factor
  p[2] = 11;    // 32Na half-life
  p[3] = 82;    // 32Mg half-life
  p[4] = 500;   // exp bg scaling factor
  p[5] = 200;   // exp bg half-life

  int rebin = 20; // counts/2ms
  int binnum = 500;  


  TGraphErrors *gr = 0;
  TH1D *cth1 = (TH1D *)th1->Clone("cth1");
  cth1->Rebin(rebin);
  std::vector<double> myx;
  std::vector<double> myy;
  std::vector<double> mydx;
  std::vector<double> mydy;
  for(int i=1;i<=binnum;i++){
    myx.push_back(cth1->GetBinCenter(i));
    myy.push_back(cth1->GetBinContent(i));
    mydx.push_back(((double)rebin)*0.5*(1/3));
    mydy.push_back(sqrt(myy.back()));
  }
  gr = new TGraphErrors(myx.size(),
      &myx[0],
      &myy[0],
      &mydx[0],
      &mydy[0]);



  TF1 *fx = new TF1("fx",MYFit,0,binnum,6);
  for(int i=0;i<6;i++){
    fx->SetParameter(i,p[i]);
  }

  gr->Fit(fx,"N");

  double chi2 = fx->GetChisquare();
  double ndf = fx->GetNDF();

  int fac = 1;
  //while(chi2>1){
  while(fac<10){
    p[0] = p[0] + 50*fac;
    fx->SetParameter(0,p[0]);  
    fx->SetParLimits(0,0,myy[0]); 
    p[1] = p[1] + 50*fac;
    fx->SetParameter(1,p[1]);  
    fx->SetParLimits(1,0,myy[0]); 
    p[2] = p[2] + 0.5*fac;
    fx->SetParameter(2,p[2]);  
    fx->SetParLimits(2,10,16); 
    p[3] = p[3] + 0.5*fac;
    fx->SetParameter(3,p[3]);  
    fx->SetParLimits(3,80,90); 
    p[4] = p[4] + 50*fac;
    fx->SetParameter(4,p[4]);  
    fx->SetParLimits(4,0,myy[0]); 
    p[5] = p[5] + 0.5*fac;
    fx->SetParameter(5,p[5]);  
    fx->SetParLimits(5,0,1000); 



    gr->Fit(fx,"N");
    double test_chi2 = fx->GetChisquare();
    test_chi2 = test_chi2/ndf;
    if((test_chi2 > chi2 && chi2<2) || (test_chi2<1)){
      printf("chi2 = %f\n", chi2);
      for(int i=0;i<6;i++){
        printf("p[%i] = %f\n", i,p[i]);
      }
      break;
    }
    chi2 = test_chi2;
    fac++;     
  }


  gr->Fit(fx);
  return;

}
